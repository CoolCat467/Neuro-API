"""Sphinx Configuration."""

from __future__ import annotations

# Configuration file for the Sphinx documentation builder.
#
# For the full list of built-in configuration values, see the documentation:
# https://www.sphinx-doc.org/en/master/usage/configuration.html
import collections.abc
import importlib.metadata
import os
import sys
from typing import TYPE_CHECKING, cast

from sphinx.util.inventory import _InventoryItem

if TYPE_CHECKING:
    from sphinx.application import Sphinx
    from sphinx.util.typing import Inventory

sys.path.insert(0, os.path.abspath("../src"))

# Enable reloading with `typing.TYPE_CHECKING` being True
os.environ["SPHINX_AUTODOC_RELOAD_MODULES"] = "1"

# -- Project information -----------------------------------------------------
# https://www.sphinx-doc.org/en/master/usage/configuration.html#project-information

html_context = {"current_version": os.environ.get("READTHEDOCS_VERSION_NAME")}


# -- General configuration ---------------------------------------------------
# https://www.sphinx-doc.org/en/master/usage/configuration.html#general-configuration

extensions = [
    "sphinx.ext.autodoc",  # Auto-generate docs from docstrings
    "sphinx.ext.intersphinx",
    "sphinx.ext.coverage",
    "sphinx.ext.napoleon",  # Support Google/NumPy docstring styles
    "sphinxcontrib.jquery",
    "sphinx_codeautolink",
]

intersphinx_mapping = {
    "python": ("https://docs.python.org/3", None),
    "trio": ("https://trio.readthedocs.io/en/latest/", None),
}

# See https://sphinx-codeautolink.readthedocs.io/en/latest/reference.html#configuration
codeautolink_autodoc_inject = False
codeautolink_global_preface = """
import neuro_api
from neuro_api import *
"""


def add_intersphinx(app: Sphinx) -> None:
    """Add some specific intersphinx mappings.

    Hooked up to builder-inited. app.builder.env.interpshinx_inventory is not an official API, so this may break on new sphinx versions.
    """

    def add_mapping(
        reftype: str,
        library: str,
        obj: str,
        version: str = "3.12",
        target: str | None = None,
    ) -> None:
        """Add mapping."""
        url_version = "3" if version == "3.12" else version
        if target is None:
            target = f"{library}.{obj}"

        # sphinx doing fancy caching stuff makes this attribute invisible
        # to type checkers
        inventory = app.builder.env.intersphinx_inventory  # type: ignore[attr-defined]
        assert isinstance(inventory, dict)
        inventory = cast("Inventory", inventory)

        inventory[f"py:{reftype}"][f"{target}"] = _InventoryItem(
            project_name="Python",
            project_version=version,
            uri=f"https://docs.python.org/{url_version}/library/{library}.html/{obj}",
            display_name="-",
        )

    # This has been removed in Py3.12, so add a link to the 3.11 version with deprecation warnings.
    add_mapping("method", "pathlib", "Path.link_to", "3.11")

    # defined in py:data in objects.inv, but sphinx looks for a py:class
    # see https://github.com/sphinx-doc/sphinx/issues/10974
    # to dump the objects.inv for the stdlib, you can run
    # python -m sphinx.ext.intersphinx http://docs.python.org/3/objects.inv
    add_mapping("class", "math", "inf")
    add_mapping("class", "types", "FrameType")

    # new in py3.12, and need target because sphinx is unable to look up
    # the module of the object if compiling on <3.12
    if not hasattr(collections.abc, "Buffer"):
        add_mapping("class", "collections.abc", "Buffer", target="Buffer")


autodoc_member_order = "bysource"

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# The master toctree document.
master_doc = "index"

project = "Neuro-API"
copyright = "2025, CoolCat467"  # noqa: A001 # Name shadows builtin
author = "CoolCat467"

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.

version = importlib.metadata.version("neuro_api")
# The full version, including alpha/beta/rc tags.
release = version


# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = "en"

exclude_patterns: list[str] = []

highlight_language = "python3"


# -- Options for HTML output -------------------------------------------------
# https://www.sphinx-doc.org/en/master/usage/configuration.html#options-for-html-output

html_theme = "sphinx_rtd_theme"


html_theme_options = {
    # default is 2
    # show deeper nesting in the RTD theme's sidebar TOC
    # https://stackoverflow.com/questions/27669376/
    # I'm not 100% sure this actually does anything with our current
    # versions/settings...
    "navigation_depth": 4,
    "prev_next_buttons_location": "both",
}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["_static"]

# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [(master_doc, "neruo_api", "Neuro-API Documentation", [author], 1)]


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (
        master_doc,
        "Neuro-API",
        "Neuro-API Documentation",
        author,
        "Neuro-API",
        "Neuro SDK client.",
        "Miscellaneous",
    ),
]
